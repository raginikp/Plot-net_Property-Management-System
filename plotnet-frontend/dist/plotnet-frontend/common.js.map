{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/services/sales.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { Lead, Deal, PaymentSchedule } from '../models/sales.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SalesService {\n  private apiUrl = 'http://localhost:8080/api/sales';\n\n  // Mock data for demonstration\n  private mockLeads: Lead[] = [\n    {\n      id: 1,\n      name: 'John Smith',\n      email: 'john.smith@email.com',\n      phone: '+1234567890',\n      source: 'website',\n      status: 'qualified',\n      interestedProperty: 'Green Valley Residency',\n      budget: 6000000,\n      assignedTo: 2,\n      notes: 'Interested in corner plot with north facing',\n      createdAt: new Date('2024-08-15'),\n      updatedAt: new Date('2024-09-01')\n    },\n    {\n      id: 2,\n      name: 'Emily Johnson',\n      email: 'emily.j@email.com',\n      phone: '+1234567891',\n      source: 'referral',\n      status: 'new',\n      interestedProperty: 'Tech Park Commercial',\n      budget: 8000000,\n      assignedTo: 2,\n      notes: 'Looking for commercial space for IT company',\n      createdAt: new Date('2024-09-01'),\n      updatedAt: new Date('2024-09-01')\n    }\n  ];\n\n  private mockDeals: Deal[] = [\n    {\n      id: 1,\n      leadId: 1,\n      propertyId: 1,\n      plotId: 1,\n      customerName: 'John Smith',\n      dealValue: 6600000,\n      status: 'agreement',\n      associateId: 2,\n      commission: 132000,\n      paymentSchedule: [],\n      documents: ['agreement.pdf', 'payment_plan.pdf'],\n      createdAt: new Date('2024-09-01')\n    }\n  ];\n\n  constructor(private http: HttpClient) {}\n\n  getLeads(): Observable<Lead[]> {\n    return of(this.mockLeads);\n  }\n\n  getLeadsByAssociate(associateId: number): Observable<Lead[]> {\n    const leads = this.mockLeads.filter(l => l.assignedTo === associateId);\n    return of(leads);\n  }\n\n  createLead(lead: Omit<Lead, 'id' | 'createdAt' | 'updatedAt'>): Observable<Lead> {\n    const newLead: Lead = {\n      id: Math.max(...this.mockLeads.map(l => l.id)) + 1,\n      ...lead,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.mockLeads.push(newLead);\n    return of(newLead);\n  }\n\n  updateLead(id: number, lead: Partial<Lead>): Observable<Lead> {\n    const index = this.mockLeads.findIndex(l => l.id === id);\n    if (index !== -1) {\n      this.mockLeads[index] = { ...this.mockLeads[index], ...lead, updatedAt: new Date() };\n      return of(this.mockLeads[index]);\n    }\n    throw new Error('Lead not found');\n  }\n\n  getDeals(): Observable<Deal[]> {\n    return of(this.mockDeals);\n  }\n\n  getDealsByAssociate(associateId: number): Observable<Deal[]> {\n    const deals = this.mockDeals.filter(d => d.associateId === associateId);\n    return of(deals);\n  }\n\n  createDeal(deal: Omit<Deal, 'id' | 'createdAt'>): Observable<Deal> {\n    const newDeal: Deal = {\n      id: Math.max(...this.mockDeals.map(d => d.id)) + 1,\n      ...deal,\n      createdAt: new Date()\n    };\n    this.mockDeals.push(newDeal);\n    return of(newDeal);\n  }\n\n  updateDeal(id: number, deal: Partial<Deal>): Observable<Deal> {\n    const index = this.mockDeals.findIndex(d => d.id === id);\n    if (index !== -1) {\n      this.mockDeals[index] = { ...this.mockDeals[index], ...deal };\n      return of(this.mockDeals[index]);\n    }\n    throw new Error('Deal not found');\n  }\n}\n"],"names":["of","SalesService","constructor","http","apiUrl","mockLeads","id","name","email","phone","source","status","interestedProperty","budget","assignedTo","notes","createdAt","Date","updatedAt","mockDeals","leadId","propertyId","plotId","customerName","dealValue","associateId","commission","paymentSchedule","documents","getLeads","getLeadsByAssociate","leads","filter","l","createLead","lead","newLead","Math","max","map","push","updateLead","index","findIndex","Error","getDeals","getDealsByAssociate","deals","d","createDeal","deal","newDeal","updateDeal","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}