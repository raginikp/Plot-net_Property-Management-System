{"version":3,"file":"src_app_components_login_login_component_ts.js","mappings":"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","sources":["./src/app/components/login/login.component.ts","./src/app/services/auth.service.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSnackBarModule, MatSnackBar } from '@angular/material/snack-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatProgressSpinnerModule\n  ],\n  template: `\n    <div class=\"login-container\">\n      <div class=\"login-card\">\n        <mat-card>\n          <mat-card-header>\n            <mat-card-title>PlotNet Login</mat-card-title>\n            <mat-card-subtitle>Property Management System</mat-card-subtitle>\n          </mat-card-header>\n\n          <mat-card-content>\n            <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\n                <mat-label>Email</mat-label>\n                <input matInput type=\"email\" formControlName=\"email\" required>\n                <mat-icon matSuffix>email</mat-icon>\n                <mat-error *ngIf=\"loginForm.get('email')?.hasError('required')\">\n                  Email is required\n                </mat-error>\n                <mat-error *ngIf=\"loginForm.get('email')?.hasError('email')\">\n                  Please enter a valid email\n                </mat-error>\n              </mat-form-field>\n\n              <mat-form-field appearance=\"outline\" class=\"full-width\">\n                <mat-label>Password</mat-label>\n                <input matInput [type]=\"hidePassword ? 'password' : 'text'\" formControlName=\"password\" required>\n                <button mat-icon-button matSuffix (click)=\"hidePassword = !hidePassword\" type=\"button\">\n                  <mat-icon>{{hidePassword ? 'visibility_off' : 'visibility'}}</mat-icon>\n                </button>\n                <mat-error *ngIf=\"loginForm.get('password')?.hasError('required')\">\n                  Password is required\n                </mat-error>\n              </mat-form-field>\n\n              <button mat-raised-button color=\"primary\" type=\"submit\" \n                      [disabled]=\"loginForm.invalid || isLoading\" class=\"login-button\">\n                <mat-spinner *ngIf=\"isLoading\" diameter=\"20\"></mat-spinner>\n                <span *ngIf=\"!isLoading\">Login</span>\n              </button>\n            </form>\n\n            <div class=\"demo-credentials\">\n              <h4>Demo Credentials:</h4>\n              <div class=\"credential-item\">\n                <strong>Admin:</strong> admin&#64;plotnet.com / password\n              </div>\n              <div class=\"credential-item\">\n                <strong>Associate:</strong> associate&#64;plotnet.com / password\n              </div>\n            </div>\n          </mat-card-content>\n        </mat-card>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .login-container {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      min-height: 100vh;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      padding: 20px;\n    }\n\n    .login-card {\n      width: 100%;\n      max-width: 400px;\n    }\n\n    mat-card {\n      padding: 20px;\n    }\n\n    mat-card-header {\n      text-align: center;\n      margin-bottom: 30px;\n    }\n\n    mat-card-title {\n      font-size: 2em;\n      color: #333;\n    }\n\n    mat-card-subtitle {\n      color: #666;\n      margin-top: 5px;\n    }\n\n    .full-width {\n      width: 100%;\n      margin-bottom: 20px;\n    }\n\n    .login-button {\n      width: 100%;\n      height: 48px;\n      font-size: 1.1em;\n      margin-top: 10px;\n    }\n\n    .demo-credentials {\n      margin-top: 30px;\n      padding: 15px;\n      background: #f5f5f5;\n      border-radius: 8px;\n      text-align: center;\n    }\n\n    .demo-credentials h4 {\n      margin: 0 0 10px 0;\n      color: #666;\n    }\n\n    .credential-item {\n      margin: 8px 0;\n      font-size: 0.9em;\n    }\n\n    mat-spinner {\n      margin-right: 10px;\n    }\n  `]\n})\nexport class LoginComponent {\n  loginForm: FormGroup;\n  hidePassword = true;\n  isLoading = false;\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    if (this.loginForm.valid) {\n      this.isLoading = true;\n      \n      this.authService.login(this.loginForm.value).subscribe({\n        next: (response) => {\n          this.isLoading = false;\n          this.snackBar.open(`Welcome, ${response.user.name}!`, 'Close', { duration: 3000 });\n          \n          // Redirect based on user role\n          switch (response.user.role) {\n            case 'admin':\n              this.router.navigate(['/admin']);\n              break;\n            case 'associate':\n              this.router.navigate(['/associate']);\n              break;\n            default:\n              this.router.navigate(['/schemes']);\n          }\n        },\n        error: (error) => {\n          this.isLoading = false;\n          this.snackBar.open('Invalid credentials. Please try again.', 'Close', { duration: 3000 });\n        }\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, BehaviorSubject, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { User } from '../models/user.model';\n\nexport interface LoginRequest {\n  email: string;\n  password: string;\n}\n\nexport interface AuthResponse {\n  user: User;\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = 'http://localhost:8080/api/auth';\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  // Mock users for demonstration\n  private mockUsers: User[] = [\n    {\n      id: 1,\n      name: 'John Admin',\n      email: 'admin@plotnet.com',\n      role: 'admin',\n      phone: '+1234567890',\n      status: 'active',\n      createdAt: new Date('2024-01-01'),\n      lastLogin: new Date()\n    },\n    {\n      id: 2,\n      name: 'Sarah Associate',\n      email: 'associate@plotnet.com',\n      role: 'associate',\n      phone: '+1234567891',\n      status: 'active',\n      createdAt: new Date('2024-01-15'),\n      lastLogin: new Date()\n    }\n  ];\n\n  constructor(private http: HttpClient) {\n    // Check if user is already logged in\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n\n  login(credentials: LoginRequest): Observable<AuthResponse> {\n    // return this.http.post<AuthResponse>(`${this.apiUrl}/login`, credentials);\n    \n    // Mock authentication\n    const user = this.mockUsers.find(u => u.email === credentials.email);\n    if (user && credentials.password === 'password') {\n      const authResponse: AuthResponse = {\n        user: { ...user, lastLogin: new Date() },\n        token: 'mock-jwt-token'\n      };\n      \n      localStorage.setItem('currentUser', JSON.stringify(authResponse.user));\n      localStorage.setItem('token', authResponse.token);\n      this.currentUserSubject.next(authResponse.user);\n      \n      return of(authResponse);\n    }\n    \n    throw new Error('Invalid credentials');\n  }\n\n  logout(): void {\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('token');\n    this.currentUserSubject.next(null);\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  isAuthenticated(): boolean {\n    return !!this.getCurrentUser();\n  }\n\n  hasRole(role: string): boolean {\n    const user = this.getCurrentUser();\n    return user?.role === role;\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('token');\n  }\n}\n"],"names":["CommonModule","FormsModule","ReactiveFormsModule","Validators","MatCardModule","MatFormFieldModule","MatInputModule","MatButtonModule","MatIconModule","MatSnackBarModule","MatProgressSpinnerModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","LoginComponent","constructor","fb","authService","router","snackBar","hidePassword","isLoading","loginForm","group","email","required","password","onSubmit","valid","login","value","subscribe","next","response","open","user","name","duration","role","navigate","error","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","Router","i4","MatSnackBar","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_9_listener","ɵɵtemplate","LoginComponent_mat_error_16_Template","LoginComponent_mat_error_17_Template","LoginComponent_Template_button_click_22_listener","LoginComponent_mat_error_25_Template","LoginComponent_mat_spinner_27_Template","LoginComponent_span_28_Template","ɵɵadvance","ɵɵproperty","tmp_1_0","get","hasError","tmp_2_0","ɵɵtextInterpolate","tmp_5_0","invalid","i5","NgIf","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","RequiredValidator","FormGroupDirective","FormControlName","i6","MatCard","MatCardContent","MatCardHeader","MatCardSubtitle","MatCardTitle","i7","MatFormField","MatLabel","MatError","MatSuffix","i8","MatInput","i9","MatButton","MatIconButton","i10","MatIcon","i11","MatProgressSpinner","styles","BehaviorSubject","of","http","apiUrl","currentUserSubject","currentUser$","asObservable","mockUsers","id","phone","status","createdAt","Date","lastLogin","storedUser","localStorage","getItem","JSON","parse","credentials","find","u","authResponse","token","setItem","stringify","Error","logout","removeItem","getCurrentUser","isAuthenticated","hasRole","getToken","ɵɵinject","HttpClient","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}